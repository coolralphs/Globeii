// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TailwindMauiBlazorApp.Core.Data;

#nullable disable

namespace TailwindMauiBlazorApp.Core.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250801005457_AddedConfigStartTimeToItinerary")]
    partial class AddedConfigStartTimeToItinerary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("Id")
                        .HasName("p_k_app_users");

                    b.ToTable("app_user", (string)null);
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ConfigStartTime")
                        .HasColumnType("interval")
                        .HasColumnName("config_start_time");

                    b.Property<int>("ConfigTimeIncrement")
                        .HasColumnType("integer")
                        .HasColumnName("config_time_increment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_itineraries");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("itinerary", (string)null);
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.ItineraryPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BookingRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("booking_required");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_booked");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<int>("ItineraryId")
                        .HasColumnType("integer")
                        .HasColumnName("itinerary_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<bool>("PrePaymentRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("pre_payment_required");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int?>("UserRating")
                        .HasColumnType("integer")
                        .HasColumnName("user_rating");

                    b.Property<bool>("WasSkipped")
                        .HasColumnType("boolean")
                        .HasColumnName("was_skipped");

                    b.HasKey("Id")
                        .HasName("p_k_itinerary_places");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ItineraryId")
                        .HasDatabaseName("i_x_itinerary_places_itinerary_id");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("i_x_itinerary_places_place_id");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("itinerary_place", (string)null);
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministrativeArea")
                        .HasColumnType("text")
                        .HasColumnName("administrative_area");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("text")
                        .HasColumnName("formatted_address");

                    b.Property<string>("GooglePlaceId")
                        .HasColumnType("text")
                        .HasColumnName("google_place_id");

                    b.Property<double>("Lat")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("lng");

                    b.Property<string>("Locality")
                        .HasColumnType("text")
                        .HasColumnName("locality");

                    b.Property<string>("OpeningHoursJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("opening_hours_json");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("PrimaryType")
                        .HasColumnType("text")
                        .HasColumnName("primary_type");

                    b.Property<string>("PrimaryTypeDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("primary_type_display_name");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("RegionCode")
                        .HasColumnType("text")
                        .HasColumnName("region_code");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.PrimitiveCollection<string[]>("Types")
                        .HasColumnType("text[]")
                        .HasColumnName("types");

                    b.Property<int?>("UserRatingCount")
                        .HasColumnType("integer")
                        .HasColumnName("user_rating_count");

                    b.HasKey("Id")
                        .HasName("p_k_places");

                    b.ToTable("place", (string)null);
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_user_id");

                    b.Property<DateTime>("LinkedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("linked_at");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderAvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("provider_avatar_url");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderEmail")
                        .HasColumnType("text")
                        .HasColumnName("provider_email");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("provider_user_id");

                    b.HasKey("Id")
                        .HasName("p_k_user_logins");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("i_x_user_logins_app_user_id");

                    b.HasIndex("Provider", "ProviderUserId")
                        .IsUnique();

                    b.ToTable("user_login", (string)null);
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.Itinerary", b =>
                {
                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_itineraries_app_users_creator_id");

                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_itineraries_app_users_updator_id");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.ItineraryPlace", b =>
                {
                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_itinerary_places_app_users_creator_id");

                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.Itinerary", "Itinerary")
                        .WithMany("ItineraryPlaces")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_itinerary_places_itineraries_itinerary_id");

                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_itinerary_places__places_place_id");

                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_itinerary_places_app_users_updator_id");

                    b.Navigation("Creator");

                    b.Navigation("Itinerary");

                    b.Navigation("Place");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.UserLogin", b =>
                {
                    b.HasOne("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", "AppUser")
                        .WithMany("Logins")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_logins_app_users_app_user_id");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("TailwindMauiBlazorApp.Core.Models.Entities.Itinerary", b =>
                {
                    b.Navigation("ItineraryPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
