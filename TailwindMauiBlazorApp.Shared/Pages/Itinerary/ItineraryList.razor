@page "/itineraries"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using TailwindMauiBlazorApp.Core.Data
@using TailwindMauiBlazorApp.Core.Models
@using TailwindMauiBlazorApp.Core.Models.Entities
@using static TailwindMauiBlazorApp.Shared.Helpers.DateHelper
@inject AppDbContext db
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]

<div class="right-container container">
    <div class="row mb-3 align-items-center">
        <div class="col">
            <h3 class="mb-0">Itineraries</h3>
        </div>
        <div class="col-auto">
            <a class="btn btn-primary d-inline-flex align-items-center" href="/add-itinerary">
                <i class="bi bi-plus-circle me-2"></i> Add New Itinerary
            </a>
        </div>
    </div>

    @if (!itineraries.Any())
    {
        <div class="text-muted fst-italic">There are no itineraries.</div>
    }

    <div class="row g-3">
        @foreach (var itinerary in itineraries.OrderBy(i => i.StartDate))
        {
            <div class="col-12 col-md-6 col-lg-6">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="card-title fs-5 fw-semibold">@itinerary.Name</h4>
                            @{
                                int totalDays = 0;
                                if (itinerary.StartDate.HasValue && itinerary.EndDate.HasValue)
                                {
                                    totalDays = TotalDays(itinerary.StartDate, itinerary.EndDate);
                                }
                                <p class="text-secondary mb-1">
                                    @if (totalDays > 0)
                                    {
                                        <div>@FormatDateRange(itinerary.StartDate, itinerary.EndDate)</div>
                                    }
                                    else
                                    {
                                        <div>Dates not available</div>
                                    }
                                </p>
                                <p class="text-muted fst-italic small mb-0">
                                    @($"{totalDays}-day trip")
                                </p>
                            }
                        </div>
                        <div class="d-flex gap-2 ms-3">
                            @*  <a class="btn btn-sm btn-primary d-flex align-items-center" href="/edit-itinerary/@itinerary.Id">
                                <i class="bi bi-pencil me-1"></i> Edit
                            </a> *@
                           @*  <a class="btn btn-sm btn-outline-secondary d-flex align-items-center" href="/itinerary-places/@itinerary.Id">
                                <i class="bi bi-calendar-week me-1"></i> View
                            </a> *@
                            <button class="btn btn-sm btn-outline-secondary d-flex align-items-center"
                                    @onclick="@(() => NavigationManager.NavigateTo($"/itinerary-places/{itinerary.Id}"))">
                                <i class="bi bi-calendar-week me-1"></i> View
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Inject] NavigationManager NavigationManager { get; set; } = default!;
    List<Itinerary> itineraries = [];
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("AppUserId")?.Value;
        if (Guid.TryParse(userIdClaim, out var userId))
        {
            itineraries = await db.Itineraries
                                 .Where(i => i.CreatedBy == userId)
                                 .ToListAsync();
        }
    }

    // void EditItinerary(int id)
    // {
    //     // Navigate to edit page
    //     NavigationManager.NavigateTo($"/edit-itinerary/{id}");
    // }

    void ViewAll(int id)
    {
        // Your logic to view all map points for this itinerary
        Console.WriteLine($"View all map points for itinerary {id}");
    }

    // void ViewCities(int id)
    // {
    //     // Your logic to view cities map for this itinerary
    //     Console.WriteLine($"View cities for itinerary {id}");
    // }


}