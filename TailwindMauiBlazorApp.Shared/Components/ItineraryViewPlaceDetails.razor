@using BlazorBootstrap
@using TailwindMauiBlazorApp.Shared.Helpers
@using TailwindMauiBlazorApp.Shared.Models.ViewModels
@inject JsInterop JsInterop
@inject IJSRuntime JS

<div class="place-details" style="z-index:9998;">
    <div class="mb-2">
        <label class="form-label"><strong>Address:</strong></label>
        <div class="d-flex align-items-start">
            <InputTextArea @bind-Value="ExpandedItem.Place.FormattedAddress"
                           class="form-control form-control-sm me-2"
                           rows="2" Disabled />

            @* <a href=@($"https://www.google.com/maps/place/?q=place_id:{ExpandedItem.Place.GooglePlaceId}")
               target="_blank"
               rel="noopener noreferrer"
               class="btn btn-outline-secondary btn-sm me-1"
               title="Open in browser">
                <i class="bi bi-box-arrow-up-right"></i>
            </a> *@

            <a href=@($"https://www.google.com/maps/search/?api=1&query={ExpandedItem.Place.Lat},{ExpandedItem.Place.Lng}")
               target="_blank"
               rel="noopener noreferrer"
               class="btn btn-outline-secondary btn-sm me-1"
               title="Open in browser">
                <i class="fa-brands fa-google"></i>
            </a>

            @if (isiPhone)
            {
                <a href=@($"maps://?q={ExpandedItem.Place.Lat},{ExpandedItem.Place.Lng}")
                   target="_blank"
                   rel="noopener noreferrer"
                   class="btn btn-outline-secondary btn-sm me-1"
                   title="Open in Apple Maps">
                    <i class="fa-brands fa-apple"></i>
                </a>
            }

            @* <button type="button"
                    class="btn btn-outline-secondary btn-sm me-1"
                    title="Open in Google Maps"
                    @onclick='() => OpenMap("google")'>
                <i class="fa-brands fa-google"></i>
            </button> *@

            <!-- Open in browser -->
            @*  <button type="button"
                    class="btn btn-outline-secondary btn-sm me-1"
                    title="Open in Google Maps"
                    @onclick='() => OpenMap("google")'>
                <i class="fa-brands fa-google"></i>
            </button>

            @if (isiPhone)
            {
                <button type="button"
                        class="btn btn-outline-secondary btn-sm me-1"
                        title="Open in Apple Maps"
                        @onclick='() => OpenMap("apple")'>
                    <i class="fa-brands fa-apple"></i>
                </button>
            } *@


            <!-- Copy to clipboard -->
            @*  <button type="button"
                    class="btn btn-outline-secondary btn-sm me-2"
                    title="Copy to clipboard"
                    @onclick="() => CopyAddress(ExpandedItem.Place.FormattedAddress)">
                <i class="bi bi-copy"></i>
            </button> *@

            <!-- Copied message only for Address -->
            @*  <div class="ms-auto">
                @if (copiedAddress)
                {
                    <small class="text-success">Copied!</small>
                }
            </div> *@
        </div>

    </div>

    <div class="mb-2">
        <label class="form-label"><strong>Notes:</strong></label>
        <InputTextArea @bind-Value="ExpandedItem.Notes"
                       class="form-control form-control-sm"
                       rows="3" disabled />
    </div>

    <div class="mb-2">
        <label class="form-label"><strong>URL:</strong></label>
        <div class="d-flex align-items-center">
            <TextInput @bind-Value="ExpandedItem.Url" class="form-control form-control-sm me-2" />

            <!-- Open in browser -->
            @* <button type="button" class="btn btn-outline-secondary btn-sm me-1"
                    title="Open in browser"
                    @onclick="() => OpenUrl(ExpandedItem.Url)">
                <i class="bi bi-box-arrow-up-right"></i>
            </button> *@

            <a href="@ExpandedItem.Url"
               target="_blank"
               rel="noopener noreferrer"
               class="btn btn-outline-secondary btn-sm me-1"
               title="Open in browser">
                <i class="bi bi-box-arrow-up-right"></i>
            </a>

            @*  <!-- Copy to clipboard -->
            <button type="button" class="btn btn-outline-secondary btn-sm me-2"
                    title="Copy to clipboard"
                    @onclick="() => CopyUrl(ExpandedItem.Url)"
                    disabled>
                <i class="bi bi-copy"></i>
            </button> *@

            <!-- Copied message only for URL -->
            @*  <div class="ms-auto">
                @if (copiedUrl)
                {
                    <small class="text-success">Copied!</small>
                }
            </div> *@
        </div>
    </div>

    <div class="mb-2 form-check">
        <InputCheckbox @bind-Value="ExpandedItem.IsBooked" class="form-check-input" id="isBooked" disabled />
        <label class="form-check-label" for="isBooked"><strong>Is Reserved</strong></label>
    </div>

    <div class="mb-2 form-check">
        <InputCheckbox @bind-Value="ExpandedItem.BookingRequired" class="form-check-input" id="bookingRequired" disabled />
        <label class="form-check-label" for="bookingRequired"><strong>Needs Reservation</strong></label>
    </div>

    <div class="mb-2 form-check">
        <InputCheckbox @bind-Value="ExpandedItem.IsPaid" class="form-check-input" id="isPaid" disabled />
        <label class="form-check-label" for="isPaid"><strong>Is Paid</strong></label>
    </div>

    <div class="mb-2 form-check">
        <InputCheckbox @bind-Value="ExpandedItem.PrePaymentRequired" class="form-check-input" id="prePaymentRequired" disabled />
        <label class="form-check-label" for="prePaymentRequired"><strong>Pre-Payment Required</strong></label>
    </div>

</div>

@code {
    [Parameter]
    public ItineraryPlaceViewModel ExpandedItem { get; set; } = new();
    private bool isiPhone;
    private bool copiedAddress;
    private bool copiedUrl;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isiPhone = await JsInterop.IsIPhone();
            StateHasChanged();
        }
    }

    private void OpenMap(string mapType)
    {
        if (ExpandedItem?.Place == null) return;

        JS.InvokeVoidAsync("openMaps",
            ExpandedItem.Place.GooglePlaceId,
            ExpandedItem.Place.Lat,
            ExpandedItem.Place.Lng,
            mapType);
    }

    private void OpenUrl(string? url)
    {
        if (!string.IsNullOrWhiteSpace(url))
        {
            // Ensure it starts with http:// or https://
            if (!url.StartsWith("http://") && !url.StartsWith("https://"))
            {
                url = "https://" + url;
            }

            // JS.InvokeVoidAsync("open", url, "_blank");
            // JsInterop.CopyTextToClipboard("open", url, "_blank");
        }
    }

    private async Task CopyAddress(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return;

        // Call JS immediately

        // JS.InvokeVoidAsync("navigator.clipboard.writeText", value);
        await JsInterop.CopyTextToClipboard(value);


        // Show “Copied” message
        copiedAddress = true;
        copiedUrl = false;
        StateHasChanged();

        // Hide after 2 seconds without breaking user gesture
        _ = Task.Run(async () =>
        {
            await Task.Delay(2000);
            copiedAddress = false;
            await InvokeAsync(StateHasChanged);
        });
    }

    private void CopyUrl(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return;

        JS.InvokeVoidAsync("navigator.clipboard.writeText", value);

        copiedUrl = true;
        copiedAddress = false; // ensure Address doesn't show
        StateHasChanged();

        // Hide after delay without blocking JS call
        _ = Task.Run(async () =>
        {
            await Task.Delay(2000);
            copiedUrl = false;
            await InvokeAsync(StateHasChanged);
        });
    }
}