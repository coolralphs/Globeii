@using System.Linq.Expressions
@* <InputText value="@TimeString" type="time" class="@CssClass" @onchange="@(e => HandleChangeAndBind(e))" /> *@
<input type="time"
       value="@TimeString"
       class="@CssClass"
       @oninput="OnInput"
       @onblur="OnBlurHandler"
       @onkeydown="HandleKeyDown" />
@code {
    [Parameter] public TimeSpan Value { get; set; }
    [Parameter] public EventCallback<TimeSpan> ValueChanged { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }
    [Parameter] public Expression<Func<TimeSpan>>? ValueExpression { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? Style { get; set; }
    [CascadingParameter] private EditContext? EditContext { get; set; }
    private FieldIdentifier _fieldIdentifier;
    private string TimeString { get; set; } = "";

    protected override void OnInitialized()
    {
        if (ValueExpression != null)
        {
            _fieldIdentifier = FieldIdentifier.Create(ValueExpression);
        }
    }

    protected override void OnParametersSet()
    {
        var formatted = Value.ToString(@"hh\:mm");
        if (formatted != TimeString)
        {
            TimeString = formatted;
        }
    }

    private bool inputChanged = false;
    private void OnInput(ChangeEventArgs e)
    {
        // Update the input display string as user types
        TimeString = e.Value?.ToString() ?? "";
        inputChanged = true;
        // Do NOT update Value here, just the display string
    }

    private async Task OnBlurHandler(FocusEventArgs e)
    {
        if (!inputChanged)
            return;
        // When they leave the field, parse and notify parent
        if (TimeSpan.TryParse(TimeString, out var ts))
        {
            if (firstStr is not null)
            {
                ts = firstStr.Value;
            }
            await ValueChanged.InvokeAsync(ts);
        }
        else
        {
            await ValueChanged.InvokeAsync(TimeSpan.Zero);
        }

        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync(new ChangeEventArgs { Value = TimeString });

        firstStr = null;
        inputChanged = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CommitTimeChange();
        }
    }
    private TimeSpan? firstStr;
    private async Task CommitTimeChange()
    {
        if (!inputChanged)
            return;

        if (TimeSpan.TryParse(TimeString, out var ts))
        {
            firstStr = ts;
            // await ValueChanged.InvokeAsync(ts);
        }
        else
        {
            firstStr = TimeSpan.Zero;
            // await ValueChanged.InvokeAsync(TimeSpan.Zero);
        }

        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync(new ChangeEventArgs { Value = TimeString });
    }
   }